//
//  YGCategoryViewController.m
//  Ledger
//
//  Created by Ян on 13/06/2017.
//  Copyright © 2017 Yan Gerasimuk. All rights reserved.
//

#import "YGCategoryViewController.h"
#import "YGCurrencyEditController.h"
#import "YGExpenseCategoryEditController.h"
#import "YGCategoryDefaultEditController.h"
#import "YGCategoryManager.h"
#import "YYGCategoryOneRowCell.h"

static NSString *const kCategoryOneRowCellId = @"CategoryOneRowCellId";


@interface YGCategoryViewController (){
    YGCategoryManager *p_manager;
}
@property (strong, nonatomic) NSArray <YGCategory *> *categories;

@end

@implementation YGCategoryViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    // add button on nav bar
    UIBarButtonItem *addButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(actionAddButtonPressed)];
    self.navigationItem.rightBarButtonItem = addButton;
    
    // cell classes for one and two rows
    [self.tableView registerClass:[YYGCategoryOneRowCell class] forCellReuseIdentifier:kCategoryOneRowCellId];
    
    // add observers to reload table when update cache
    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
    switch (self.categoryType) {
        case YGCategoryTypeCurrency:
            [center addObserver:self selector:@selector(reloadDataFromCache) name:@"CategoryManagerCurrencyCacheUpdateEvent" object:nil];
            break;
        case YGCategoryTypeExpense:
            [center addObserver:self selector:@selector(reloadDataFromCache) name:@"CategoryManagerExpenseCacheUpdateEvent" object:nil];
            break;
        case YGCategoryTypeIncome:
            [center addObserver:self selector:@selector(reloadDataFromCache) name:@"CategoryManagerIncomeCacheUpdateEvent" object:nil];
            break;
        case YGCategoryTypeCreditorOrDebtor:
            [center addObserver:self selector:@selector(reloadDataFromCache) name:@"CategoryManagerCreditorOrDebtorCacheUpdateEvent" object:nil];
            break;
        case YGCategoryTypeTag:
            [center addObserver:self selector:@selector(reloadDataFromCache) name:@"CategoryManagerTagCacheUpdateEvent" object:nil];
            break;
        default:
            break;
    }
    
    [self reloadDataFromCache];
}


/**
 Reload tableView to update outdated cache. Method generated by observer when updated cache in category manager.
 */
- (void) reloadDataFromCache {
    
    // fill inner db
    p_manager = [YGCategoryManager sharedInstance];
    self.categories = [p_manager categoriesByType:self.categoryType];
    [self.tableView reloadData];
}

/**
 Dealloc of object. Remove all notifications.
 */
-(void)dealloc {
    
    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
    [center removeObserver:self];
}


#pragma mark - Actions

- (void)actionAddButtonPressed {
    
    if(self.categoryType == YGCategoryTypeCurrency){
        YGCurrencyEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"CurrencyDetailScene"];
        
        vc.isNewCurrency = YES;
        vc.currency = nil;
        
        [self.navigationController pushViewController:vc animated:YES];
    }
    else if(self.categoryType == YGCategoryTypeExpense){
        
        YGExpenseCategoryEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"ExpenseCategoryDetailScene"];
        
        vc.isNewExpenseCategory = YES;
        vc.expenseCategory = nil;
        
        [self.navigationController pushViewController:vc animated:YES];
    }
    else if(self.categoryType == YGCategoryTypeIncome
            || (self.categoryType == YGCategoryTypeCreditorOrDebtor)
            || (self.categoryType == YGCategoryTypeTag)){
        
        YGCategoryDefaultEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"CategoryDefaultEditScene"];
        
        vc.categoryType = self.categoryType;
        vc.isNewCategory = YES;
        vc.category = nil;
        
        [self.navigationController pushViewController:vc animated:YES];
    }
}


#pragma mark - UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
        
    if(self.categoryType == YGCategoryTypeCurrency){
        YGCurrencyEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"CurrencyDetailScene"];
        
        vc.isNewCurrency = NO;
        vc.currency = _categories[indexPath.row];
        
        [self.navigationController pushViewController:vc animated:YES];
    }
    else if(self.categoryType == YGCategoryTypeExpense){
        
        YGExpenseCategoryEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"ExpenseCategoryDetailScene"];
        
        vc.isNewExpenseCategory = NO;
        vc.expenseCategory = self.categories[indexPath.row];
        
        [self.navigationController pushViewController:vc animated:YES];
        
    }
    else if(self.categoryType == YGCategoryTypeIncome
            || (self.categoryType == YGCategoryTypeCreditorOrDebtor)
            || (self.categoryType == YGCategoryTypeTag)){
        
        YGCategoryDefaultEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"CategoryDefaultEditScene"];
        
        vc.categoryType = self.categoryType;
        vc.isNewCategory = NO;
        vc.category = _categories[indexPath.row];
        
        [self.navigationController pushViewController:vc animated:YES];
    }
}


#pragma mark - TableView data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [self.categories count];
}


- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
    
    YGCategory *category = _categories[indexPath.row];
    
    YYGCategoryOneRowCell *cellCategory = (YYGCategoryOneRowCell *)cell;
    
    cellCategory.textLeft = category.name;
    
    if(category.type == YGCategoryTypeCurrency){
        cellCategory.textRight = [category shorterName];
    }
    
    // need to be colored at any way
    if(category.active)
        cellCategory.colorTextLeft = [UIColor blackColor];
    else
        cellCategory.colorTextLeft = [UIColor grayColor];
}


- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    YYGCategoryOneRowCell *cell = [tableView dequeueReusableCellWithIdentifier:kCategoryOneRowCellId];
    
    if(cell == nil){
        cell = [[YYGCategoryOneRowCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:kCategoryOneRowCellId];
    }
    
    return cell;
}

@end
