//
//  YGCategoryViewController.m
//  Ledger
//
//  Created by Ян on 13/06/2017.
//  Copyright © 2017 Yan Gerasimuk. All rights reserved.
//

#import "YGCategoryViewController.h"
#import "YGCurrencyEditController.h"
#import "YGExpenseCategoryEditController.h"
#import "YGCategoryDefaultEditController.h"
#import "YGCategoryManager.h"
#import "YYGCategoryOneRowCell.h"

#import "YYGCategorySection.h"
#import "YYGCategoryRow.h"

@interface YGCategoryViewController() {
    YGCategoryManager *p_manager;
    YYGCategorySection *p_section;
}
@end

@implementation YGCategoryViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    // add button on nav bar
    UIBarButtonItem *addButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(actionAddButtonPressed)];
    self.navigationItem.rightBarButtonItem = addButton;
    
    switch(self.categoryType) {
        case YGCategoryTypeIncome:
            self.navigationItem.title = NSLocalizedString(@"INCOME_SOURCES_VIEW_FORM_TITLE", @"Title of Income sources form.");
            break;
        case YGCategoryTypeExpense:
            self.navigationItem.title = NSLocalizedString(@"EXPENSE_CATEGORIES_VIEW_FORM_TITLE", @"Title of Expense categories form.");
            break;
        case YGCategoryTypeCurrency:
            self.navigationItem.title = NSLocalizedString(@"CURRENCIES_VIEW_FORM_TITLE", @"Title of Currencies form");
            break;
        case YGCategoryTypeCreditorOrDebtor:
            self.navigationItem.title = NSLocalizedString(@"CREDITORS_DEBTORS_VIEW_FORM_TITLE", @"Title of Creditors/Debtors form.");
            break;
        case YGCategoryTypeTag:
            self.navigationItem.title = NSLocalizedString(@"TAGS_VIEW_FORM_TITLE", @"Title of Tags form.");
            break;
        default:
            self.navigationItem.title = @"?";
    }
    
    // cell classes for one and two rows
    [self.tableView registerClass:[YYGCategoryOneRowCell class] forCellReuseIdentifier:kCategoryOneRowCellId];
    
    // add observers to reload table when update cache
    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
    switch(self.categoryType) {
        case YGCategoryTypeCurrency:
            [center addObserver:self selector:@selector(reloadDataFromCache) name:@"CategoryManagerCurrencyCacheUpdateEvent" object:nil];
            break;
        case YGCategoryTypeExpense:
            [center addObserver:self selector:@selector(reloadDataFromCache) name:@"CategoryManagerExpenseCacheUpdateEvent" object:nil];
            break;
        case YGCategoryTypeIncome:
            [center addObserver:self selector:@selector(reloadDataFromCache) name:@"CategoryManagerIncomeCacheUpdateEvent" object:nil];
            break;
        case YGCategoryTypeCreditorOrDebtor:
            [center addObserver:self selector:@selector(reloadDataFromCache) name:@"CategoryManagerCreditorOrDebtorCacheUpdateEvent" object:nil];
            break;
        case YGCategoryTypeTag:
            [center addObserver:self selector:@selector(reloadDataFromCache) name:@"CategoryManagerTagCacheUpdateEvent" object:nil];
            break;
        default:
            break;
    }
    
    [self reloadDataFromCache];
    
    // Remove empty cells
    self.tableView.tableFooterView = [[UIView alloc] init];
}

/**
 Reload tableView to update outdated cache. Method generated by observer when updated cache in category manager.
 */
- (void)reloadDataFromCache {
    
    // fill inner db
    p_manager = [YGCategoryManager sharedInstance];
    //self.categories = [p_manager categoriesByType:self.categoryType];
    
    p_section = [[YYGCategorySection alloc] initWithCategories:[p_manager categoriesByType:self.categoryType]];
    
    [self.tableView reloadData];
}


/**
 Dealloc of object. Remove all notifications.
 */
- (void)dealloc {
    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
    [center removeObserver:self];
}

#pragma mark - Actions

- (void)actionAddButtonPressed {
    
    if(self.categoryType == YGCategoryTypeCurrency) {
        YGCurrencyEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"CurrencyDetailScene"];
        
        vc.isNewCurrency = YES;
        vc.currency = nil;
        
        [self.navigationController pushViewController:vc animated:YES];
    }
    else if(self.categoryType == YGCategoryTypeExpense) {
        
        YGExpenseCategoryEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"ExpenseCategoryDetailScene"];
        
        vc.isNewExpenseCategory = YES;
        vc.expenseCategory = nil;
        
        [self.navigationController pushViewController:vc animated:YES];
    }
    else if(self.categoryType == YGCategoryTypeIncome
            || (self.categoryType == YGCategoryTypeCreditorOrDebtor)
            || (self.categoryType == YGCategoryTypeTag)) {
        
        YGCategoryDefaultEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"CategoryDefaultEditScene"];
        
        vc.categoryType = self.categoryType;
        vc.isNewCategory = YES;
        vc.category = nil;
        
        [self.navigationController pushViewController:vc animated:YES];
    }
}

#pragma mark - UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
        
    if(self.categoryType == YGCategoryTypeCurrency) {
        YGCurrencyEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"CurrencyDetailScene"];
        
        vc.isNewCurrency = NO;
        vc.currency = [p_section.rows[indexPath.row].category copy];
        
        [self.navigationController pushViewController:vc animated:YES];
    }
    else if(self.categoryType == YGCategoryTypeExpense) {
        
        YGExpenseCategoryEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"ExpenseCategoryDetailScene"];
        
        vc.isNewExpenseCategory = NO;
        vc.expenseCategory = [p_section.rows[indexPath.row].category copy];
        
        [self.navigationController pushViewController:vc animated:YES];
        
    }
    else if(self.categoryType == YGCategoryTypeIncome
            || (self.categoryType == YGCategoryTypeCreditorOrDebtor)
            || (self.categoryType == YGCategoryTypeTag)) {
        
        YGCategoryDefaultEditController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"CategoryDefaultEditScene"];
        
        vc.categoryType = self.categoryType;
        vc.isNewCategory = NO;
        vc.category = [p_section.rows[indexPath.row].category copy];
        
        [self.navigationController pushViewController:vc animated:YES];
    }
}

#pragma mark - TableView data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [p_section.rows count];
}

- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
    
    YYGCategoryRow *row = p_section.rows[indexPath.row];
    YYGCategoryOneRowCell *cellCategory = (YYGCategoryOneRowCell *)cell;
    
    if(row.category.type == YGCategoryTypeExpense) {
        
        NSString *indent = @"";
        for(NSInteger i = 0; i < row.nestedLevel; i++) {
            indent = [NSString stringWithFormat:@"\t%@", indent];
        }
        
        cellCategory.textLeft = [NSString stringWithFormat:@"%@%@", indent, row.name];
    } else
        cellCategory.textLeft = row.name;
    
    if(row.category.type == YGCategoryTypeCurrency) {
        cellCategory.textRight = [row.category shorterName];
    }
    
    // need to be colored at any way
    if(row.category.active)
        cellCategory.colorTextLeft = [UIColor blackColor];
    else
        cellCategory.colorTextLeft = [UIColor grayColor];
    
    cellCategory.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    YYGCategoryOneRowCell *cell = [tableView dequeueReusableCellWithIdentifier:kCategoryOneRowCellId];
    
    if(cell == nil) {
        cell = [[YYGCategoryOneRowCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:kCategoryOneRowCellId];
    }
    return cell;
}

@end
